---
title: Transport network visualisation hackathon
format: 
  # revealjs: default
  clean-revealjs: default
    # self-contained: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Robin Lovelace
    orcid: 0000-0001-5679-6536
    email: R dot Lovelace at leeds. ac.uk
    affiliations: University of Leeds, Active Travel England
date: last-modified
bibliography: references.bib
---

# Welcome

## Agenda I

-   11:00 - 12:30: Demo of existing tools and sharing of ideas

    -   11:00 - 11:15: Introduction and welcome (Robin Lovelace)
    -   11:15 - 11:25: Demo of `parenx` package for network simplification and visualisation of networks with Python (Will Deakin)
    -   11:25 - 11:35: Demo of reproducible traffic flow visualisation with R (Juan Pablo Fonseca Zamora)
    -   11:35 - 11:45: Demonstration of 'core network' generation and visualisation in the Network Planning Tool (Zhao Wang)
    -   11:45 - 11:55: Demonstration of visualisation with MapLibre, with reference to `od2net` and the Network Planning Tool for Scotland (Robin Lovelace)

## Agenda II

```         
-   11:55 - 12:00: Introduction to TGVE and the hackathon (Layik Hama)
-   12:00 - 12:15: Q&A of ideas for the hackathon
```

-   12:15 - 13:00: Lunch and networking

-   13:00 - 16:00: Hackathon

    -   At around 15:00 we will ask teams which teams want to present and take a break

-   16:00 - 17:00: Presentations and discussion

    -   16:00 - 16:40: Presentations
    -   16:40 - 17:00: Discussion and wrap-up

## The hackathon

See https://github.com/Robinlovelace/netvishack/

![](images/paste-15.png)

## Reproducibility

::: {.panel-tabset group="language"}
## R

```{r}
#| echo: true
library(sf)
sf::write_sf(spData::world, "world.gpkg")
plot(spData::world)
```

## Python

```{python}
#| echo: true
import geopandas as gpd
world = gpd.read_file('world.gpkg')
world.plot()
```

## JavaScript

``` bash
npm install .
npm run start
```
:::

## Case study for reference

::::: columns
::: {.column width="50%"}
The Network Planning Tool for Scotland

-   Development version (branch `dev`): [nptscot.github.io](https://nptscot.github.io/)
-   Stable version (branch `production`): [www.npt.scot](https://www.npt.scot/)
:::

::: {.column width="50%"}
![The NPT web app](/images/basemaps.png)
:::
:::::

## NPT stack

::::: columns
::: column
Backend: R + targets for 'cross-language' data pipeline workflow automation

-   Relies on Rust crates
-   Experiments with Python

Frontend: JS + MapLibre for visualisation

Progressive Web App (PWA)
:::

::: column
![Map controls](/images/map_controls.png)
:::
:::::

## User interface

![Layer Controls](/images/layer_controls.png)

# Tools

## IDEs

-   VSCode is market leader with strong community
    -   Pro: many extensions
    -   Pro: Live Share
    -   Pro: GitHub integration (including copilot)
    -   Pro: devcontainers work out-of-the-box
    -   Con: setup time, can be intimidating
-   Positron
    -   Pro: More batteries included
    -   Con: Missing great VSCode features (e.g. Live Share)
    -   Con: Early days, fewer developers
    -   Thought: why didn't they put energy into great extensions for modularity?
-   RStudio, Jupyter Lab, Zed, ...

